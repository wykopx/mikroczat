import * as T from './types.js';
export declare const template_userListItem: HTMLTemplateElement;
export declare const template_channelFeed: HTMLTemplateElement;
export declare const mikrochatFeeds: HTMLElement;
export declare const chatArea: HTMLElement;
export declare const usersPanel: HTMLElement;
export declare let fetch: any;
export declare function openNewChannel(ChannelObject: T.Channel): Promise<T.Channel>;
export declare function activateChannel(ChannelObject: string | T.Channel): Promise<void>;
export declare function refreshCommentsCountAndVotesUpForAllEntriesInChannel(ChannelObject: T.Channel): Promise<boolean>;
export declare function refreshVotesUpForAllCommentsInEntryAndAddNewComments(ChannelObject: T.Channel, EntryObject: T.Entry): Promise<boolean>;
export declare function analyzeMessagesArrayAddNewItemsOrUpdateDataExistingMessages(ChannelObject: T.Channel, messagesArray: T.Entry[] | T.Comment[]): Promise<void>;
export declare function updateCSSPropertyOnMessageArticleElement(entryOrCommentObject: T.Entry | T.Comment, changedPropertyName: string, changedObject?: T.Entry | T.Votes | T.Comments): void;
export declare function checkAndInsertNewEntriesInChannel(ChannelObject: T.Channel, limit?: number): Promise<T.Entry[]>;
export declare function checkAndInsertNewEntriesToDate(ChannelObject: T.Channel, fetchToDate: Date | string | number, delay: number, FETCH_DELAY_MILLISECONDS?: number): Promise<T.Entry[] | boolean>;
export declare function insertNewMessagesFromArray(ChannelObject: T.Channel, messagesObjectsArray: T.Entry[] | T.Comment[]): void;
export declare function insertNewItem(ChannelObject: T.Channel, messageObject: T.Entry | T.Comment): void;
export declare function checkAndInsertNewCommentsInChannel(ChannelObject: T.Channel): Promise<void>;
export declare function checkAndInsertNewCommentsInEntry(ChannelObject: T.Channel, EntryObject: T.Entry, FETCH_DELAY_MILLISECONDS?: number): Promise<void>;
export declare function setCheckingForNewMessagesInChannel(ChannelObject: T.Channel, msInterval?: number): Promise<void>;
export declare function insertNewMessage(ChannelObject: T.Channel, MessageObject: T.Entry | T.Comment): Promise<boolean>;
export declare function addUsersToChannel(ChannelObject: T.Channel, ...userObjectUsernameStringOrUsersArray: (T.User | string)[]): Promise<void>;
export declare function getMessageHTMLElement(entryObject: T.Entry): Promise<Element>;
export declare function getUserHTMLElement(userObject: T.User, channelObject?: T.Channel): Promise<Element>;
export declare function discussionViewON(ChannelObject: T.Channel, EntryObject: T.Entry): Promise<void>;
export declare function discussionViewOFF(ChannelObject: T.Channel, EntryObject: T.Entry): void;
export declare function attachDynamicCSS(options: any, css: string): void;
export declare function detachDynamicCSS(options?: any): void;
export declare function setReplyEntryID(ChannelObject: T.Channel, messageObjectOrId?: T.Entry | number): Promise<boolean>;
export declare function removeReplyEntryID(ChannelObject: T.Channel, MessageObject?: T.Entry): void;
export declare function executePostNewMessageToChannelFromTextarea(ChannelObject: T.Channel): Promise<boolean | T.Entry>;
export declare function checkIfYouCanPostCommentInEntry(entry_id: number): Promise<boolean>;
export declare function mouseOutAddEventListenerRemoveHighlightQuick(el: HTMLElement): void;
export declare function getMergedSortedFromOldestArrayOfMessages(ChannelObject: T.Channel): T.Entry[];
export declare function getMergedSortedFromOldestArrayOfMessagesByUsername(ChannelObject: T.Channel, username: string): T.Entry[];
export declare function getNewestMessageOfUser(ChannelObject: T.Channel, username: string): T.Entry | null;
export declare function getUsernamesArrayFromText(text: string, withoutAtPrefix?: boolean): string[];
export declare function prepareNewMessageBody(ChannelObject: T.Channel, messageOptions: T.NewMessageBodyData): T.Entry;
export declare function highlight(highlightElementSelector: string, highlightClass: string): void;
export declare function unhighlight(highlightElementSelector: string, highlightClass: string): void;
export declare function setupScrollListener(ChannelObject: T.Channel): void;
//# sourceMappingURL=ch.d.ts.map